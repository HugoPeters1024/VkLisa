#version 460
#include "common.glsl"

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0, set = 0) readonly buffer Input { Vertex bufferIn[]; };
layout(std430, binding = 1, set = 0) buffer Output { Vertex bufferOut[]; };
layout(std430, binding = 2, set = 0) readonly buffer Parents { uint parents[]; };

layout(push_constant) uniform PushConstants {
    uint nrVertices;
    uint nrTrianglesPerInstance;
    uint seed;
} constants;

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= constants.nrVertices) {
        return;
    }
    initRand(constants.seed);

    uint triangleId = i / 3;
    uint instanceId = triangleId / constants.nrTrianglesPerInstance;
    uint vertexOffset = i % (3 * constants.nrTrianglesPerInstance);

    uint parent0 = parents[2*instanceId+0];
    uint parent1 = parents[2*instanceId+1];


    Vertex vparent0 = bufferIn[3 * constants.nrTrianglesPerInstance * parent0 + vertexOffset];
    Vertex vparent1 = bufferIn[3 * constants.nrTrianglesPerInstance * parent1 + vertexOffset];


    // mutation
    if (randf() < 0.01f) {
        bufferOut[i] = randVertex();
    } else {
        if (randu() % 2 == 0) {
            bufferOut[i] = vparent0;
        } else {
            bufferOut[i] = vparent1;
        }
    }

}
