#version 460

#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

struct Vertex {
    vec4 pos;
    vec4 color;
};

layout(push_constant) uniform PushConstants {
    uint nrVertices;
    uint seed;
} constants;



uint rand_xorshift(in uint seed) {
    // Xorshift algorithm from George Marsaglia's paper
    seed ^= (seed << 13);
    seed ^= (seed >> 17);
    seed ^= (seed << 5);
    return seed;
}

uint g_seed = 23 * rand_xorshift(constants.seed + rand_xorshift(17 * gl_GlobalInvocationID.x));
float randf() {
    g_seed = rand_xorshift(g_seed);
    // Faster on GPU probably
    return g_seed * 2.3283064365387e-10f;
}




layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding = 0, set = 0) buffer Vertices { Vertex verts[]; };
layout(std430, binding = 1, set = 0) buffer Result { int result; };

void main() {
    if (gl_GlobalInvocationID.x >= constants.nrVertices) { 
        return; 
    }

    verts[gl_GlobalInvocationID.x].pos.xyz = vec3(randf(), randf(), randf());
}
